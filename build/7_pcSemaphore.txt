#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5
#define NUM_PRODUCERS 3  
#define NUM_CONSUMERS 4  
int buffer[BUFFER_SIZE];
int count = 0;

sem_t empty, full, mutex;

void* producer(void* arg) {
    int producer_id = *((int*)arg);  
    int item;
    
    while (1) {
        item = rand() % 100;  
        sem_wait(&empty);      
        sem_wait(&mutex);     

        buffer[count] = item;  
        count++;
        printf("Producer %d is in critical region, produced item: %d\n", producer_id, item);
        printf("Buffer: ");
        for (int i = 0; i < count; i++) {
            printf("%d ", buffer[i]);
        }
        if (count == BUFFER_SIZE) {
            printf(" (Full)");
        }
        printf("\n");

        sem_post(&mutex);      
        sem_post(&full);       
        printf("Producer %d is exiting the critical region.\n", producer_id); 
        sleep(1);              
    }
}

void* consumer(void* arg) {
    int consumer_id = *((int*)arg);  
    int item;

    while (1) {
        sem_wait(&full);       
        sem_wait(&mutex);      

        item = buffer[count - 1]; 
        count--;
        printf("Consumer %d is in critical region, consumed item: %d\n", consumer_id, item);
        printf("Buffer: ");
        for (int i = 0; i < count; i++) {
            printf("%d ", buffer[i]);
        }
        if (count == 0) {
            printf(" (Empty)");
        }
        printf("\n");

        sem_post(&mutex);      
        sem_post(&empty);      
        printf("Consumer %d is exiting the critical region.\n", consumer_id); 
        sleep(1);              
    }
}

int main() {
    pthread_t producers[NUM_PRODUCERS], consumers[NUM_CONSUMERS];
    int producer_ids[NUM_PRODUCERS], consumer_ids[NUM_CONSUMERS];

    sem_init(&empty, 0, BUFFER_SIZE); 
    sem_init(&full, 0, 0);             
    sem_init(&mutex, 0, 1);            

    
    for (int i = 0; i < NUM_PRODUCERS; i++) {
        producer_ids[i] = i + 1;  
        pthread_create(&producers[i], NULL, producer, &producer_ids[i]);
    }

    
    for (int i = 0; i < NUM_CONSUMERS; i++) {
        consumer_ids[i] = i + 1;  
        pthread_create(&consumers[i], NULL, consumer, &consumer_ids[i]);
    }

  
    for (int i = 0; i < NUM_PRODUCERS; i++) {
        pthread_join(producers[i], NULL);
    }


    for (int i = 0; i < NUM_CONSUMERS; i++) {
        pthread_join(consumers[i], NULL);
    }

    sem_destroy(&empty);               
    sem_destroy(&full);
    sem_destroy(&mutex);

    return 0;
}
