#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

pthread_mutex_t mutex;
pthread_mutex_t write_lock;
int read_count = 0;
int data = 0;

void* reader(void* arg) {
    int reader_id = *((int*)arg);
    
    while (1) {
        pthread_mutex_lock(&mutex);
        read_count++;
        if (read_count == 1) {
            pthread_mutex_lock(&write_lock);
        }
        pthread_mutex_unlock(&mutex);
        
        printf("Reader %d is in critical region, reading data: %d\n", reader_id, data);
        sleep(1);
        
        pthread_mutex_lock(&mutex);
        read_count--;
        printf("Reader %d is exiting the critical region.\n", reader_id); 
        
        if (read_count == 0) {
            pthread_mutex_unlock(&write_lock);
        }
        pthread_mutex_unlock(&mutex);
        
        sleep(1);
    }
}

void* writer(void* arg) {
    int writer_id = *((int*)arg);
    
    while (1) {
        pthread_mutex_lock(&write_lock);
        
        data++;
        printf("Writer %d is in critical region, writing data: %d\n", writer_id, data);
        sleep(1);
        
        printf("Writer %d is exiting the critical region.\n", writer_id);  
        pthread_mutex_unlock(&write_lock);
        sleep(1);
    }
}

int main() {
    pthread_t r_threads[5], w_threads[2];
    int reader_ids[5], writer_ids[2];
    
    pthread_mutex_init(&mutex, NULL);
    pthread_mutex_init(&write_lock, NULL);
    
    for (int i = 0; i < 5; i++) {
        reader_ids[i] = i + 1;
        pthread_create(&r_threads[i], NULL, reader, &reader_ids[i]);
    }
    
    for (int i = 0; i < 2; i++) {
        writer_ids[i] = i + 1;
        pthread_create(&w_threads[i], NULL, writer, &writer_ids[i]);
    }
    
    for (int i = 0; i < 5; i++) {
        pthread_join(r_threads[i], NULL);
    }
    
    for (int i = 0; i < 2; i++) {
        pthread_join(w_threads[i], NULL);
    }
    
    pthread_mutex_destroy(&mutex);
    pthread_mutex_destroy(&write_lock);
    
    return 0;
}
