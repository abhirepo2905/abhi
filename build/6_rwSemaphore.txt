#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t rw_mutex, mutex;
int read_count = 0;
int data = 0;

void* reader(void* arg) {
    int reader_id = *((int*)arg);

    while (1) {
        sem_wait(&mutex);  
        read_count++;
        if (read_count == 1) {
            sem_wait(&rw_mutex);  
        }
        sem_post(&mutex); 


        printf("Reader %d is in critical region, reading data: %d\n", reader_id, data);
        sleep(1); 

        sem_wait(&mutex);  
        read_count--;
        if (read_count == 0) {
            sem_post(&rw_mutex);  
        }
        sem_post(&mutex);  

        printf("Reader %d is exiting the critical region.\n", reader_id); 
        sleep(1);  
    }
}

void* writer(void* arg) {
    int writer_id = *((int*)arg);

    while (1) {
        sem_wait(&rw_mutex);  

        data++;
        printf("Writer %d is in critical region, writing data: %d\n", writer_id, data);
        sleep(1);  

        sem_post(&rw_mutex);  
        printf("Writer %d is exiting the critical region.\n", writer_id);  
        sleep(1);  
    }
}

int main() {
    pthread_t r_threads[5], w_threads[2];
    int reader_ids[5], writer_ids[2];

    sem_init(&rw_mutex, 0, 1); 
    sem_init(&mutex, 0, 1);      

    for (int i = 0; i < 5; i++) {
        reader_ids[i] = i + 1;
        pthread_create(&r_threads[i], NULL, reader, &reader_ids[i]);
    }

    for (int i = 0; i < 2; i++) {
        writer_ids[i] = i + 1;
        pthread_create(&w_threads[i], NULL, writer, &writer_ids[i]);
    }

    for (int i = 0; i < 5; i++) {
        pthread_join(r_threads[i], NULL);
    }

    for (int i = 0; i < 2; i++) {
        pthread_join(w_threads[i], NULL);
    }

    sem_destroy(&rw_mutex);  
    sem_destroy(&mutex);     

    return 0;
}
