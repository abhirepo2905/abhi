#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define BUFFER_SIZE 5
#define NUM_PRODUCERS 3  
#define NUM_CONSUMERS 3  

int buffer[BUFFER_SIZE];
int count = 0;

pthread_mutex_t mutex;
pthread_cond_t buffer_empty;
pthread_cond_t buffer_full;

void* producer(void* arg) {
    int item;
    int producer_id = *((int*)arg);  

    while (1) {
        item = rand() % 100;  

        pthread_mutex_lock(&mutex); 

        while (count == BUFFER_SIZE) {
            pthread_cond_wait(&buffer_empty, &mutex);  
        }

        buffer[count] = item;  
        count++;
        printf("Producer %d is in critical region, produced item: %d\n", producer_id, item);
        printf("Buffer: ");
        for (int i = 0; i < count; i++) {
            printf("%d ", buffer[i]);
        }
        if (count == BUFFER_SIZE) {
            printf(" (Full)");
        }
        printf("\n");

        pthread_cond_signal(&buffer_full);  
        pthread_mutex_unlock(&mutex);        
        printf("Producer %d is exiting the critical region.\n", producer_id); 

        sleep(1);  
    }
}

void* consumer(void* arg) {
    int item;
    int consumer_id = *((int*)arg);  

    while (1) {
        pthread_mutex_lock(&mutex);  

        while (count == 0) {
            pthread_cond_wait(&buffer_full, &mutex);  
        }

        item = buffer[count - 1]; 
        count--;
        printf("Consumer %d is in critical region, consumed item: %d\n", consumer_id, item);
        printf("Buffer: ");
        for (int i = 0; i < count; i++) {
            printf("%d ", buffer[i]);
        }
        if (count == 0) {
            printf(" (Empty)");
        }
        printf("\n");

        pthread_cond_signal(&buffer_empty);  
        pthread_mutex_unlock(&mutex);        
        printf("Consumer %d is exiting the critical region.\n", consumer_id); 

        sleep(1);  
    }
}

int main() {
    pthread_t producers[NUM_PRODUCERS], consumers[NUM_CONSUMERS];
    int producer_ids[NUM_PRODUCERS], consumer_ids[NUM_CONSUMERS];

    pthread_mutex_init(&mutex, NULL);
    pthread_cond_init(&buffer_empty, NULL);
    pthread_cond_init(&buffer_full, NULL);

   
    for (int i = 0; i < NUM_PRODUCERS; i++) {
        producer_ids[i] = i + 1; 
        pthread_create(&producers[i], NULL, producer, &producer_ids[i]);
    }

  
    for (int i = 0; i < NUM_CONSUMERS; i++) {
        consumer_ids[i] = i + 1;  
        pthread_create(&consumers[i], NULL, consumer, &consumer_ids[i]);
    }

    for (int i = 0; i < NUM_PRODUCERS; i++) {
        pthread_join(producers[i], NULL);
    }

    for (int i = 0; i < NUM_CONSUMERS; i++) {
        pthread_join(consumers[i], NULL);
    }

    pthread_mutex_destroy(&mutex);
    pthread_cond_destroy(&buffer_empty);
    pthread_cond_destroy(&buffer_full);

    return 0;
}
